import { basename, dirname, extname, join, relative, sep } from "path";
import { fileURLToPath } from "url";
import { libDir } from "../../config/directories.js";
const fileNameError = (fileName) => ({
    keyword: "filename",
    instancePath: "",
    message: `the file name "${fileName}" does not match the pattern ^[1-9][0-9]*_[A-Z][a-z]*(?:-[a-zA-Z][a-z]*)\\.yml$`
});
const baseNamePattern = /^[1-9][0-9]*_[A-Z][a-z]*(?:-[a-zA-Z][a-z]*)*\.yml$/;
const changeFileExtension = (path, ext) => join(dirname(path), basename(path, extname(path)) + ext);
const schemaIdFromSourcePath = (sourcePath) => {
    const relativePathOfType = relative(libDir, fileURLToPath(sourcePath));
    const relativePathOfSchema = changeFileExtension(relativePathOfType, ".schema.json");
    return "/" + relativePathOfSchema.split(sep).join("/");
};
export const validateSchemaCreator = (importMetaUrl, { ignoreFileNamePattern = false } = {}) => {
    const schemaId = schemaIdFromSourcePath(importMetaUrl);
    return (validator, data, filePath) => {
        const fileName = basename(filePath);
        const correctFileName = ignoreFileNamePattern || baseNamePattern.test(fileName);
        if (validator.validate(schemaId, data) && correctFileName) {
            return { tag: "Ok", value: data };
        }
        else {
            return {
                tag: "Error",
                errors: {
                    fileNameError: correctFileName ? undefined : fileNameError(fileName),
                    schemaErrors: validator.errors ?? [],
                }
            };
        }
    };
};
