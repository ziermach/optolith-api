/**
 * @main Language
 */
import { Errata } from "../../source/_Erratum.js";
import { PublicationRefs } from "../../source/_PublicationRef.js";
import { AlternativeName } from "../../_AlternativeNames.js";
import { LocaleMap } from "../../_LocaleMap.js";
import { NonEmptyString } from "../../_NonEmptyString.js";
import { LanguagePrerequisites } from "../../_Prerequisite.js";
import { AssociatedContinent } from "./_LanguageScript.js";
/**
 * @title Language
 */
export declare type Language = {
    /**
     * The language's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * The continents this language is present on.
     * @minItems 1
     */
    continent: AssociatedContinent[];
    /**
     * Language-specific specializations. Either a list of possible options or a
     * indefinite description of what may be a specialization.
     */
    specializations: Specializations;
    prerequisites?: LanguagePrerequisites;
    /**
     * The maximum possible level of the language. Only specified if lower than
     * default of 3.
     * @minimum 1
     * @maximum 2
     * @default 3
     */
    max_level?: number;
    src: PublicationRefs;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<LanguageTranslation>;
};
export declare type Specializations = {
    tag: "Specific";
    specific: SpecificSpecializations;
} | {
    tag: "Indefinite";
    indefinite: IndefiniteSpecializations;
};
export declare type SpecificSpecializations = {
    /**
     * A list of specific possible specializations.
     * @minItems 1
     */
    list: SpecificSpecialization[];
};
export declare type SpecificSpecialization = {
    /**
     * The specialization's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<SpecificSpecializationTranslation>;
};
export declare type SpecificSpecializationTranslation = {
    /**
     * The name of the specialization.
     */
    name: NonEmptyString;
    /**
     * The specialization description. It will be appended to the name in
     * parenthesis.
     */
    description?: NonEmptyString;
};
export declare type IndefiniteSpecializations = {
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<IndefiniteSpecializationsTranslation>;
};
export declare type IndefiniteSpecializationsTranslation = {
    /**
     * The specializations description.
     */
    description: NonEmptyString;
    /**
     * An input label or placeholder text for an UI element if it differs
     * from the `description`.
     */
    label?: NonEmptyString;
};
export declare type LanguageTranslation = {
    /**
     * The name of the language.
     */
    name: NonEmptyString;
    /**
     * A list of alternative names.
     * @minItems 1
     */
    alternative_names?: AlternativeName[];
    /**
     * The description of the language.
     */
    description?: NonEmptyString;
    errata?: Errata;
};
export declare const validateSchema: import("../../../validation/schema.js").TypeValidator<Language>;
