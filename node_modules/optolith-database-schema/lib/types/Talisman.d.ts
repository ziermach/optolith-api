/**
 * @main Talisman
 */
import { Errata } from "./source/_Erratum.js";
import { PublicationRefs } from "./source/_PublicationRef.js";
import { LocaleMap } from "./_LocaleMap.js";
import { NonEmptyMarkdown, NonEmptyString } from "./_NonEmptyString.js";
import { BlessedTraditionReference } from "./_SimpleReferences.js";
/**
 * @title Talisman
 */
export declare type Talisman = {
    /**
     * The talisman's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * The tradition(s) the talisman belongs to.
     * @minItems 1
     */
    tradition: BlessedTraditionReference[];
    /**
     * The talisman type.
     */
    type: TalismanType;
    /**
     * The AP value for the required trade secret.
     * @integer
     * @minimum 5
     * @multipleOf 5
     */
    ap_value: number;
    src: PublicationRefs;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<TalismanTranslation>;
};
export declare enum TalismanType {
    MainTalisman = "MainTalisman",
    Talisman = "Talisman",
    MinorTalisman = "MinorTalisman",
    Regalia = "Regalia",
    PowerfulTalisman = "PowerfulTalisman"
}
export declare type TalismanTranslation = {
    /**
     * The name of the talisman.
     */
    name: NonEmptyString;
    /**
     * The effect description.
     */
    effect: NonEmptyMarkdown;
    /**
     * The activation parameters.
     */
    activation?: TalismanActivationTranslation;
    errata?: Errata;
};
export declare type TalismanActivationTranslation = {
    /**
     * The KP cost.
     * @integer
     * @minimum 0
     */
    cost: number;
    /**
     * The duration.
     */
    duration: NonEmptyString;
};
export declare const validateSchema: import("../validation/schema.js").TypeValidator<Talisman>;
