import { CheckResultBased } from "./_ActivatableSkillCheckResultBased.js";
import { LocaleMap } from "./_LocaleMap.js";
import { ResponsiveText, ResponsiveTextReplace } from "./_ResponsiveText.js";
export declare type DurationForOneTime = {
    tag: "Immediate";
    immediate: Immediate;
} | {
    tag: "Permanent";
    permanent: PermanentDuration;
} | {
    tag: "Fixed";
    fixed: FixedDuration;
} | {
    tag: "CheckResultBased";
    check_result_based: CheckResultBasedDuration;
} | {
    tag: "Indefinite";
    indefinite: IndefiniteDuration;
};
export declare type Immediate = {
    /**
     * Specified if the duration has a maximum time span.
     */
    maximum?: DurationUnitValue;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations?: LocaleMap<ImmediateTranslation>;
};
export declare type ImmediateTranslation = {
    /**
     * A replacement string.
     */
    replacement: ResponsiveTextReplace;
};
export declare type PermanentDuration = {
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations?: LocaleMap<PermanentDurationTranslation>;
};
export declare type PermanentDurationTranslation = {
    /**
     * A replacement string.
     */
    replacement: ResponsiveTextReplace;
};
export declare type FixedDuration = {
    /**
     * If the duration is the maximum duration, so it may end earlier.
     */
    is_maximum?: true;
    /**
     * The (unitless) duration.
     * @integer
     * @minimum 1
     */
    value: number;
    /**
     * The duration unit.
     */
    unit: DurationUnit;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations?: LocaleMap<FixedDurationTranslation>;
};
export declare type FixedDurationTranslation = {
    /**
     * A replacement string.
     */
    replacement: ResponsiveTextReplace;
};
/**
 * Defines the duration being based on a check result.
 */
export declare type CheckResultBasedDuration = CheckResultBased & {
    /**
     * If the duration is the maximum duration, so it may end earlier.
     */
    is_maximum?: true;
    /**
     * The duration unit.
     */
    unit: DurationUnit;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations?: LocaleMap<CheckResultBasedDurationTranslation>;
};
export declare type CheckResultBasedDurationTranslation = {
    /**
     * A replacement string.
     */
    replacement: ResponsiveTextReplace;
};
export declare type IndefiniteDuration = {
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<IndefiniteDurationTranslation>;
};
export declare type IndefiniteDurationTranslation = {
    /**
     * A description of the duration.
     */
    description: ResponsiveText;
};
export declare type DurationForSustained = {
    /**
     * The sustained skill can be active a maximum amount of time.
     */
    maximum: DurationUnitValue;
};
export declare enum DurationUnit {
    Seconds = "Seconds",
    Minutes = "Minutes",
    Hours = "Hours",
    Days = "Days",
    Weeks = "Weeks",
    Months = "Months",
    Years = "Years",
    Centuries = "Centuries",
    Actions = "Actions",
    CombatRounds = "CombatRounds"
}
export declare type DurationUnitValue = {
    /**
     * The (unitless) duration value.
     * @integer
     * @minimum 1
     */
    value: number;
    /**
     * The unit of the `value`.
     */
    unit: DurationUnit;
};
