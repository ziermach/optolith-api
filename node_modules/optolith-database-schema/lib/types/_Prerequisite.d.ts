/**
 * @title Prerequisites
 */
import { DisplayOption } from "./prerequisites/DisplayOption.js";
import { AdvantageDisadvantagePrerequisiteGroup, AnimistPowerPrerequisiteGroup, ArcaneTraditionPrerequisiteGroup, DerivedCharacteristicPrerequisiteGroup, EnhancementPrerequisiteGroup, GeneralPrerequisiteGroup, GeodeRitualPrerequisiteGroup, InfluencePrerequisiteGroup, LanguagePrerequisiteGroup, LiturgyPrerequisiteGroup, PersonalityTraitPrerequisiteGroup, ProfessionPrerequisiteGroup, PublicationPrerequisiteGroup, SpellworkPrerequisiteGroup } from "./prerequisites/PrerequisiteGroups.js";
import { LocaleMap } from "./_LocaleMap.js";
import { NonEmptyString } from "./_NonEmptyString.js";
/**
 * A prerequisite group has no influence on validation logic. It serves as a
 * single unit for displaying purposes, where the source uses a prerequisites
 * item that cannot be represented as a single prerequisite.
 */
export declare type PrerequisiteGroup<T> = {
    /**
     * @minItems 2
     */
    list: T[];
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<NonEmptyString>;
};
export declare type PrerequisitesDisjunction<T> = {
    /**
     * @minItems 2
     */
    list: T[];
    display_option?: DisplayOption;
};
export declare type PrerequisitesElement<T> = {
    tag: "Single";
    single: T;
} | {
    tag: "Disjunction";
    disjunction: PrerequisitesDisjunction<T>;
} | {
    tag: "Group";
    group: PrerequisiteGroup<T>;
};
/**
 * @minItems 1
 */
export declare type PlainPrerequisites<T> = PrerequisitesElement<T>[];
export declare type PrerequisiteForLevel<T> = {
    /**
     * @integer
     * @minimum 1
     */
    level: number;
    prerequisite: PrerequisitesElement<T>;
};
/**
 * @minItems 1
 */
export declare type PrerequisitesForLevels<T> = PrerequisiteForLevel<T>[];
export declare type DerivedCharacteristicPrerequisites = PlainPrerequisites<DerivedCharacteristicPrerequisiteGroup>;
export declare type PublicationPrerequisites = PlainPrerequisites<PublicationPrerequisiteGroup>;
/**
 * @title Plain General Prerequisites
 */
export declare type PlainGeneralPrerequisites = PlainPrerequisites<GeneralPrerequisiteGroup>;
/**
 * @title General Prerequisites
 */
export declare type GeneralPrerequisites = PrerequisitesForLevels<GeneralPrerequisiteGroup>;
/**
 * @title Profession Prerequisites
 */
export declare type ProfessionPrerequisites = PlainPrerequisites<ProfessionPrerequisiteGroup>;
/**
 * @title Advantage/Disadvantage Prerequisites
 */
export declare type AdvantageDisadvantagePrerequisites = PrerequisitesForLevels<AdvantageDisadvantagePrerequisiteGroup>;
/**
 * @title Arcane Tradition Prerequisites
 */
export declare type ArcaneTraditionPrerequisites = PlainPrerequisites<ArcaneTraditionPrerequisiteGroup>;
/**
 * @title Personality Trait Prerequisites
 */
export declare type PersonalityTraitPrerequisites = PlainPrerequisites<PersonalityTraitPrerequisiteGroup>;
/**
 * @title Spellwork Prerequisites
 */
export declare type SpellworkPrerequisites = PlainPrerequisites<SpellworkPrerequisiteGroup>;
/**
 * @title Liturgy Prerequisites
 */
export declare type LiturgyPrerequisites = PlainPrerequisites<LiturgyPrerequisiteGroup>;
/**
 * @title Influence Prerequisites
 */
export declare type InfluencePrerequisites = PlainPrerequisites<InfluencePrerequisiteGroup>;
/**
 * @title Language Prerequisites
 */
export declare type LanguagePrerequisites = PrerequisitesForLevels<LanguagePrerequisiteGroup>;
/**
 * @title Animist Power Prerequisites
 */
export declare type AnimistPowerPrerequisites = PlainPrerequisites<AnimistPowerPrerequisiteGroup>;
/**
 * @title Geode Ritual Prerequisites
 */
export declare type GeodeRitualPrerequisites = PlainPrerequisites<GeodeRitualPrerequisiteGroup>;
/**
 * @title Enhancement Prerequisites
 */
export declare type EnhancementPrerequisites = PlainPrerequisites<EnhancementPrerequisiteGroup>;
