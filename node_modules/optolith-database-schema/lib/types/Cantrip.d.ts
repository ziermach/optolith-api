/**
 * @main Cantrip
 */
import { Errata } from "./source/_Erratum.js";
import { PublicationRefs } from "./source/_PublicationRef.js";
import { CastingTimeDuringLovemaking } from "./_ActivatableSkillCastingTime.js";
import { DurationUnit } from "./_ActivatableSkillDuration.js";
import { FixedRange } from "./_ActivatableSkillRange.js";
import { TargetCategory } from "./_ActivatableSkillTargetCategory.js";
import { Enhancements } from "./_Enhancements.js";
import { MagicalTraditionIdentifier } from "./_Identifier.js";
import { LocaleMap } from "./_LocaleMap.js";
import { ResponsiveText } from "./_ResponsiveText.js";
import { CurriculumReference, MagicalTraditionReference, PropertyReference } from "./_SimpleReferences.js";
/**
 * @title Cantrip
 */
export declare type Cantrip = {
    /**
     * The cantrip's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * Measurable parameters of a cantrip.
     */
    parameters: CantripPerformanceParameters;
    /**
     * The target category – the kind of creature or object – the skill affects.
     */
    target: TargetCategory;
    /**
     * The associated property.
     */
    property: PropertyReference;
    /**
     * A note specifying the dissemination of the cantrip in different traditions.
     * Sometimes a cantrip is exclusively available to one or more specific
     * traditions, but usually one the academies and traditions are listed the
     * cantrip is most commonly teached in.
     */
    note?: CantripNote;
    src: PublicationRefs;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<CantripTranslation>;
    enhancements?: Enhancements;
};
export declare type CantripNote = {
    tag: "Exclusive";
    exclusive: ExclusiveCantripNote;
} | {
    tag: "Common";
    common: CommonCantripNotes;
};
export declare type ExclusiveCantripNote = {
    /**
     * The traditions the cantrip is exclusively available to.
     * @minItems 1
     * @uniqueItems
     */
    traditions: MagicalTraditionReference[];
};
export declare type CommonCantripNotes = {
    /**
     * The academies and traditions the cantrip is commonly teached in.
     * @minItems 1
     * @uniqueItems
     */
    list: CommonCantripNote[];
};
export declare type CommonCantripNote = {
    tag: "Academy";
    academy: CurriculumReference;
} | {
    tag: "Tradition";
    tradition: CommonCantripTraditionNote;
};
export declare type CommonCantripTraditionNote = {
    /**
     * The magical tradition's identifier.
     */
    id: MagicalTraditionIdentifier;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations?: LocaleMap<CommonCantripTraditionNoteTranslation>;
};
export declare type CommonCantripTraditionNoteTranslation = {
    /**
     * A note, appended to the generated string in parenthesis.
     * @minLength 1
     */
    note: string;
};
export declare type CantripTranslation = {
    /**
     * The name of the spell.
     * @minLength 1
     */
    name: string;
    /**
     * The effect description.
     * @markdown
     * @minLength 1
     */
    effect: string;
    /**
     * @deprecated
     */
    range: string;
    /**
     * @deprecated
     */
    duration: string;
    /**
     * @deprecated
     */
    target: string;
    errata?: Errata;
};
/**
 * Measurable parameters of a blessing.
 */
export declare type CantripPerformanceParameters = {
    range: CantripRange;
    duration: CantripDuration;
};
export declare type CantripRange = {
    tag: "Self";
    self: {};
} | {
    tag: "Touch";
    touch: {};
} | {
    tag: "Fixed";
    fixed: FixedRange;
};
export declare type CantripDuration = {
    tag: "Immediate";
    immediate: {};
} | {
    tag: "Fixed";
    fixed: FixedCantripDuration;
} | {
    tag: "DuringLovemaking";
    during_lovemaking: CastingTimeDuringLovemaking;
} | {
    tag: "Indefinite";
    indefinite: IndefiniteCantripDuration;
};
export declare type FixedCantripDuration = {
    /**
     * If `true`, the duration is a maximum duration.
     */
    is_maximum?: true;
    /**
     * The (unitless) duration.
     * @integer
     * @minimum 1
     */
    value: number;
    /**
     * The duration unit.
     */
    unit: DurationUnit;
};
export declare type IndefiniteCantripDuration = {
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<IndefiniteDurationTranslation>;
};
export declare type IndefiniteDurationTranslation = {
    /**
     * A description of the duration.
     */
    description: ResponsiveText;
};
export declare const validateSchema: import("../validation/schema.js").TypeValidator<Cantrip>;
