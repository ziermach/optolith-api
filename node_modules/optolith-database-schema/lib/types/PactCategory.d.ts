/**
 * @main PactCategory
 */
import { Errata } from "./source/_Erratum.js";
import { PublicationRefs } from "./source/_PublicationRef.js";
import { LocaleMap } from "./_LocaleMap.js";
import { NonEmptyString } from "./_NonEmptyString.js";
/**
 * @title Pact Category
 */
export declare type PactCategory = {
    /**
     * The pact category's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * Types of creatures in this category.
     * @minItems 1
     */
    types: PactType[];
    /**
     * Domains in this category.
     * @minItems 1
     */
    domains: PactDomain[];
    src: PublicationRefs;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<PactCategoryTranslation>;
};
export declare type PactCategoryTranslation = {
    /**
     * The name of the pact category.
     */
    name: NonEmptyString;
    errata?: Errata;
};
export declare type PactType = {
    /**
     * The type's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<PactTypeTranslation>;
};
export declare type PactTypeTranslation = {
    /**
     * The name of the type.
     */
    name: NonEmptyString;
};
export declare type PactDomain = {
    /**
     * The domain's identifier. An unique, increasing integer.
     * @integer
     * @minimum 1
     */
    id: number;
    /**
     * All translations for the entry, identified by IETF language tag (BCP47).
     */
    translations: LocaleMap<PactDomainTranslation>;
};
export declare type PactDomainTranslation = {
    /**
     * The name of the domain.
     */
    name: NonEmptyString;
};
export declare const validateSchema: import("../validation/schema.js").TypeValidator<PactCategory>;
